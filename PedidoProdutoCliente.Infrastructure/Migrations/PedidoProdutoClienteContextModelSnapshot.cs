// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PedidoProdutoCliente.Infrastructure.Contexts;

#nullable disable

namespace PedidoProdutoCliente.Infrastructure.Migrations
{
    [DbContext(typeof(PedidoProdutoClienteContext))]
    partial class PedidoProdutoClienteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PedidoProduto", b =>
                {
                    b.Property<Guid>("PedidosId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProdutosId")
                        .HasColumnType("integer");

                    b.HasKey("PedidosId", "ProdutosId");

                    b.HasIndex("ProdutosId");

                    b.ToTable("PedidoProduto");
                });

            modelBuilder.Entity("PedidoProdutoCliente.Domain.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("character varying(14)")
                        .HasComment("Documento do cliente (CPF)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)")
                        .HasComment("Email do cliente");

                    b.Property<string>("Endereco")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasComment("Nome do cliente");

                    b.Property<string>("Telefone")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("character varying(13)")
                        .HasComment("Número do telefone do cliente");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("PedidoProdutoCliente.Domain.Models.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("PagamentoForma")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasComment("Forma de pagamento");

                    b.Property<int>("Parcelas")
                        .HasColumnType("integer")
                        .HasComment("Quantidade de parcelas");

                    b.Property<decimal>("ValorParcela")
                        .HasColumnType("numeric")
                        .HasComment("Valor da parcela");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric")
                        .HasComment("Valor total do pedido");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("PedidoProdutoCliente.Domain.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Datacadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasComment("Nome do produto");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasComment("Qantidade em estoque");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasComment("Valor do produto");

                    b.HasKey("Id");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("PedidoProduto", b =>
                {
                    b.HasOne("PedidoProdutoCliente.Domain.Models.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PedidoProdutoCliente.Domain.Models.Produto", null)
                        .WithMany()
                        .HasForeignKey("ProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PedidoProdutoCliente.Domain.Models.Pedido", b =>
                {
                    b.HasOne("PedidoProdutoCliente.Domain.Models.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("PedidoProdutoCliente.Domain.Models.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
